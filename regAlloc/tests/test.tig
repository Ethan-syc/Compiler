/*
let
  type list = {hd:int, rest:list}
  var b:list := list {hd=0, rest=nil}
  var a:list := list {hd=1, rest=b}
in
  a.rest.rest.rest := nil;
  a.rest.hd + 2
end

let
  type a=b
  type c=int
  type b=c
  var varA:a := 3
  var varB:b := varA
  var varC:c := varB
in
  varA+varB+varC
end


let
  type b = {item:a}
  type a = {item:b}

  var varA:a := a {item=nil}
  var varB:b := b {item=varA}
in
  varA.item + 1
end

let
type a = {one:b, two:c}
type d = array of e
type f = array of a
type b = {one:string, two:d}
type e = int
type c = array of d
var arrayd := d[10] of 3
var arrayc := c[1] of arrayd
var recordb := b {one="aa", two=arrayd}
var recorda := a {one=recordb, two=arrayc}
var arrayf := f[10] of recorda
in
arrayf[1].two[1][2] = 1;
recorda.one.two[1] = 1;
recorda.one.one = "a"
end

let
  var x: int := 3
  var y: int := 4
  function f(x: int, b: int): int = x + b
  function g(x: int): int =
    if x = 1
    then 1
    else (if x = 2 then 1 else g(x - 1) + g(x - 2))
in
  f(x + y, 2);
  g(10)
end
let
  var x: int := 2
  var z: int := 3
  val y: int := 100
in
  if y-x > z then z+x else z+y
end
let
  function fact(x: int): int =
    if x = 0 then 1 else fact(x - 1) * x
in
  fact(5)
end
let
  function y(a: int, b: int, c: int, d: int, e: int): int = 5
  function x(a: int): int =
    let
      var b: int := 3
      var c: int := 3
      var d: int := 3
      var e: int := 3
      var f: int := 3
      var g: int := y(b, c, d, e, f)
      var h: int := 3
      var i: int := 3
      var j: int := 3
      var k: int := 3
      var l: int := a + b + c + d + e + f + g + h + i + j + k + 3
    in
      e
    end
  var s: string := "hello world!"
in
  x(3);
  print(s)
end

let
  type r = {x: int, y: string}
  var re: r := r {x=3, y="hello"}
in
  re.x
end
let
  function f(a: string, b: string, c: string, d: string, e: string) =
  let
    function g() =
    (print(a);
     print("\n");
     print(b);
     print("\n");
     print(c);
     print("\n");
     print(d);
     print("\n");
     print(e);
     print("\n"))
  in
    g()
  end
in
  f("x", "y", "z", "p", "q")
end

let
  function read10(): string =
    let var buf: string := ""
    in
      for i := 1 to 10 do
      let
        var c: string := getchar()
      in
        buf := concat(buf, c)
      end;
     buf
   end
in
  print(read10())
end

let
  var sum: int := 0
  var i: int := 0
in
  while i < 10 do (sum := sum + i; i := i + 1);
  sum
end

let
 type any = {any : int}
 var buffer := getchar()

function readint(any: any) : int =
 let var i := 0
     function isdigit(s : string) : int =
		  ord(buffer)>=ord("0") & ord(buffer)<=ord("9")
     function skipto() =
       while buffer=" " | buffer="\n"
         do buffer := getchar()
  in skipto();
     any.any := isdigit(buffer);
     while isdigit(buffer)
       do (i := i*10+ord(buffer)-ord("0"); buffer := getchar());
     i
 end

 type list = {first: int, rest: list}

 function readlist() : list =
    let var any := any{any=0}
        var i := readint(any)
     in if any.any
         then list{first=i,rest=readlist()}
         else nil
    end

var list := readlist()
in
  list.first
end

let
  var buffer: string := "hello world\n"
  function f() =
    let
      function g() =
        let
          function h() =
            print(buffer)
        in
          h()
        end
    in
      g()
    end
in
  f()
end

let
  function f(x: int): int = g(x) + 1
  function g(x: int): int =
    let
      function h(): int =
        f(x) + 2
    in
      h()
    end
in
  g(3)
end

let

 type any = {any : int}
 var buffer := getchar()

function readint(any: any) : int =
 let var i := 0

     function isdigit(s : string) : int =
		  let
      var isdigit_result := (ord(buffer)>=ord("0") & ord(buffer)<=ord("9"))
      in
        print("isdigit ");
        print(s);
        print("\n");
        print("result: ");
        if (isdigit_result = 1) then print("1\n") else print("0\n");
        isdigit_result
      end

     function skipto() =
       (print("skipto\n");
       while buffer=" " | buffer="\n"
         do (print("encounter a white space\n");buffer := getchar()))

    in skipto();
     any.any := isdigit(buffer);
     print("any.any in readint is");
     (if (any.any = 0) then print("0\n") else print("1\n"));
     while isdigit(buffer)
       do (i := i*10+ord(buffer)-ord("0"); buffer := getchar());
     i
 end

 type list = {first: int, rest: list}
 function readlist() =
     let var any := any{any=0}
         var i := readint(any)
      in
        print("readlist once\n")
     end
 in readlist()
end
/* nested comment */
*/
printInt(1)