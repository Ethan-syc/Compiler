/*
let
  type list = {hd:int, rest:list}
  var b:list := list {hd=0, rest=nil}
  var a:list := list {hd=1, rest=b}
in
  a.rest.rest.rest := nil;
  a.rest.hd + 2
end

let
  type a=b
  type c=int
  type b=c
  var varA:a := 3
  var varB:b := varA
  var varC:c := varB
in
  varA+varB+varC
end


let
  type b = {item:a}
  type a = {item:b}

  var varA:a := a {item=nil}
  var varB:b := b {item=varA}
in
  varA.item + 1
end

let
type a = {one:b, two:c}
type d = array of e
type f = array of a
type b = {one:string, two:d}
type e = int
type c = array of d
var arrayd := d[10] of 3
var arrayc := c[1] of arrayd
var recordb := b {one="aa", two=arrayd}
var recorda := a {one=recordb, two=arrayc}
var arrayf := f[10] of recorda
in
arrayf[1].two[1][2] = 1;
recorda.one.two[1] = 1;
recorda.one.one = "a"
end

let
  var x: int := 3
  var y: int := 4
  function f(x: int, b: int): int = x + b
  function g(x: int): int =
    if x = 1
    then 1
    else (if x = 2 then 1 else g(x - 1) + g(x - 2))
in
  f(x + y, 2);
  g(10)
end
let
  var x: int := 2
  var z: int := 3
  val y: int := 100
in
  if y-x > z then z+x else z+y
end
let
  function fact(x: int): int =
    if x = 0 then 1 else fact(x - 1) * x
in
  fact(3)
end
*/
let
  function y(a: int, b: int, c: int, d: int, e: int): int = 5
  function x(a: int): int =
    let
      var b: int := 3
      var c: int := 3
      var d: int := 3
      var e: int := 3
      var f: int := 3
      var g: int := y(b, c, d, e, f)
      var h: int := 3
      var i: int := 3
      var j: int := 3
      var k: int := 3
      var l: int := a + b + c + d + e + f + g + h + i + j + k + 3
    in
      e
    end
  var s: string := "hello world!"
in
  x(3);
  print(s)
end